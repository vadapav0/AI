def is_safe(board, row, col, n): 
    # Check this row on left side
    for i in range(col): 
        if board[row][i] == 1: 
            return False 
    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)): 
        if board[i][j] == 1: 
            return False 
    # Check lower diagonal on left side
    for i, j in zip(range(row, n), range(col, -1, -1)): 
        if board[i][j] == 1: 
            return False 
    return True 

def solve_n_queens(board, col, n): 
    if col >= n: 
        return True 
    for i in range(n): 
        if is_safe(board, i, col, n): 
            board[i][col] = 1  # Place queen
            if solve_n_queens(board, col + 1, n): 
                return True 
            board[i][col] = 0  # Backtrack
    return False 

def print_board(board, n): 
    for i in range(n): 
        for j in range(n): 
            print("Q" if board[i][j] == 1 else ".", end=" ") 
        print() 

def solve_n_queens_problem(n): 
    board = [[0] * n for _ in range(n)] 
    if solve_n_queens(board, 0, n): 
        print("Solution:")
        print_board(board, n) 
    else: 
        print("No solution exists.") 

# Solve the N-Queens problem for n = 6
solve_n_queens_problem(6)
