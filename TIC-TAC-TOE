import math

HUMAN = 'O'
AI = 'X'

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print("|".join(row))
    print("-" * 5)

# Function to check if there are any moves left on the board
def is_moves_left(board):
    for row in board:
        if '_' in row:
            return True
    return False

# Function to evaluate the board and check if there's a winner
def evaluate(board):
    # Check rows for a win
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != '_':
            if row[0] == AI:
                return 10
            elif row[0] == HUMAN:
                return -10

    # Check columns for a win
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != '_':
            if board[0][col] == AI:
                return 10
            elif board[0][col] == HUMAN:
                return -10

    # Check diagonals for a win
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != '_':
        if board[0][0] == AI:
            return 10
        elif board[0][0] == HUMAN:
            return -10

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != '_':
        if board[0][2] == AI:
            return 10
        elif board[0][2] == HUMAN:
            return -10

    # If no winner, return 0
    return 0

# Minimax algorithm to compute the best move
def minimax(board, depth, is_max):
    score = evaluate(board)

    # If AI has won, return the score
    if score == 10:
        return score - depth

    # If Human has won, return the score
    if score == -10:
        return score + depth

    # If no moves left, it's a draw
    if not is_moves_left(board):
        return 0

    # If it's the maximizer's (AI's) move
    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = AI
                    best = max(best, minimax(board, depth + 1, not is_max))
                    board[i][j] = '_'
        return best
    else:
        # Minimizer's (Human's) move
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = HUMAN
                    best = min(best, minimax(board, depth + 1, not is_max))
                    board[i][j] = '_'
        return best

# Function to find the best move for AI
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = AI
                move_val = minimax(board, 0, False)
                board[i][j] = '_'
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

# Main function to play the game
def play_game():
    board = [
        ['_', '_', '_'],
        ['_', '_', '_'],
        ['_', '_', '_']
    ]

    print("Initial board:")
    print_board(board)

    while is_moves_left(board) and evaluate(board) == 0:
        # Human's move
        try:
            num = int(input("Enter position (1-9) to place your 'O': ")) - 1
            if num < 0 or num > 8:
                print("Invalid input! Please enter a number between 1 and 9.")
                continue
            row = num // 3
            col = num % 3
            if board[row][col] == '_':
                board[row][col] = HUMAN
                print("\nBoard after Human's move:")
                print_board(board)
            else:
                print("Invalid move! Try again.")
                continue
        except ValueError:
            print("Invalid input! Please enter a valid number.")
            continue

        # Check if game has ended
        if evaluate(board) != 0 or not is_moves_left(board):
            break

        # AI's move
        print("AI is making a move...")
        best_move = find_best_move(board)
        board[best_move[0]][best_move[1]] = AI
        print("\nBoard after AI's move:")
        print_board(board)

    score = evaluate(board)
    if score == 10:
        print("AI wins!")
    elif score == -10:
        print("Human wins!")
    else:
        print("It's a draw!")

# Start the game
if __name__ == "__main__":
    play_game()
