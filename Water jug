from collections import deque

def is_measurable(m, n, d):
    if d % gcd(m, n) != 0:
        return False
    return d <= max(m, n)

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def water_jug_solver(m, n, d):
    if not is_measurable(m, n, d):
        print("It is not possible to measure the desired amount.")
        return

    visited = set()
    queue = deque([(0, 0)])  # Start with both jugs empty
    parent = {}

    while queue:
        jug1, jug2 = queue.popleft()

        # Check if we've reached the goal
        if jug1 == d or jug2 == d:
            print_solution(jug1, jug2, parent)
            return

        if (jug1, jug2) in visited:
            continue

        visited.add((jug1, jug2))

        # Possible actions:
        # 1. Fill Jug1
        if (m, jug2) not in visited:
            queue.append((m, jug2))
            parent[(m, jug2)] = (jug1, jug2)

        # 2. Fill Jug2
        if (jug1, n) not in visited:
            queue.append((jug1, n))
            parent[(jug1, n)] = (jug1, jug2)

        # 3. Empty Jug1
        if (0, jug2) not in visited:
            queue.append((0, jug2))
            parent[(0, jug2)] = (jug1, jug2)

        # 4. Empty Jug2
        if (jug1, 0) not in visited:
            queue.append((jug1, 0))
            parent[(jug1, 0)] = (jug1, jug2)

        # 5. Pour from Jug1 to Jug2
        pour_to_jug2 = min(jug1, n - jug2)
        new_jug1 = jug1 - pour_to_jug2
        new_jug2 = jug2 + pour_to_jug2
        if (new_jug1, new_jug2) not in visited:
            queue.append((new_jug1, new_jug2))
            parent[(new_jug1, new_jug2)] = (jug1, jug2)

        # 6. Pour from Jug2 to Jug1
        pour_to_jug1 = min(jug2, m - jug1)
        new_jug1 = jug1 + pour_to_jug1
        new_jug2 = jug2 - pour_to_jug1
        if (new_jug1, new_jug2) not in visited:
            queue.append((new_jug1, new_jug2))
            parent[(new_jug1, new_jug2)] = (jug1, jug2)

    print("It is not possible to measure the desired amount.")

def print_solution(jug1, jug2, parent):
    path = []
    state = (jug1, jug2)

    while state in parent:
        path.append(state)
        state = parent[state]

    path.append((0, 0))  # The start state
    path.reverse()

    for i, step in enumerate(path):
        print(f"Step {i}: Jug1 = {step[0]} liters, Jug2 = {step[1]} liters")

# Example usage
if __name__ == "__main__":
    m = 5  # Capacity of Jug1
    n = 3  # Capacity of Jug2
    d = 4  # Desired amount
    water_jug_solver(m, n, d)
